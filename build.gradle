buildscript {
    ext.kotlin_version = '1.2.31'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.+'
    }
}

plugins {
    id 'com.google.cloud.tools.jib' version '1.0.0'
}

apply plugin: 'kotlin'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'application'


group 'com.bardsoftware.papeeria.backend.cosmas'
version '1.0-SNAPSHOT'


jib.to.image = 'eu.gcr.io/ganttproject.biz/api-project-620082121657/cosmas:dev'


sourceSets {
    main {
        java {
            srcDirs 'src/main/java', 'generated/source/proto/main/java',
                    'generated/source/proto/main/grpc'
        }
    }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'com.google.protobuf:protobuf-java:3.+'
    compile 'io.grpc:grpc-stub:1.+'
    compile 'io.grpc:grpc-protobuf:1.+'
    compile "io.grpc:grpc-netty:1.+"
    compile "io.grpc:grpc-testing:1.+"
    compile "com.xenomachina:kotlin-argparser:2.0.+"
    compile 'com.google.cloud:google-cloud-storage:1.23.+'
    compile 'com.google.cloud:google-cloud-datastore:1.23.+'
    compile 'com.google.cloud:google-cloud-nio:0.42.+'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.+'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.3.+'
    compile group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: '2.0.+'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.+'

}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.+'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.+'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

mainClassName = 'com.bardsoftware.papeeria.backend.cosmas.CosmasServerKt'

startScripts.enabled = false

task cosmasServer(type: CreateStartScripts) {
    mainClassName = 'com.bardsoftware.papeeria.backend.cosmas.CosmasServerKt'
    applicationName = 'cosmas-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
    from(cosmasServer)
    fileMode = 0755
}

test {
    testLogging {
        showStandardStreams = true
    }
}

task genProdKeys(type: Exec) {
    commandLine "openssl", "req",
        "-x509",
        "-newkey", "rsa:4096",
        "-keyout", "prod_cosmas_key.pem",
        "-out", "prod_cosmas_cert.pem",
        "-days", "3650",
        "-nodes",
        "-subj",
        "/C=CZ/ST=/L=Prague/O=BarD Software s.r.o/CN=cosmas.prod.papeeria.com"
}
task genDevKeys(type: Exec) {
    commandLine "openssl", "req",
            "-x509",
            "-newkey", "rsa:4096",
            "-keyout", "dev_cosmas_key.pem",
            "-out", "dev_cosmas_cert.pem",
            "-days", "3650",
            "-nodes",
            "-subj",
            "/C=CZ/ST=/L=Prague/O=BarD Software s.r.o/CN=cosmas.dev.papeeria.com"
}